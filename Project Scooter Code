class Scooter {
    static nextSerial = 1;

    constructor(station) {
        this.station = station; // the station where the scooter is docked
        this.user = null; // user who checked out the scooter
        this.serial = Scooter.nextSerial++; // assign the next serial number
        this.charge = 100; // starts fully charged
        this.isBroken = false; // starts in good condition
    }

    rent(user) {
        if (this.charge <= 20) {
            throw new Error("Scooter needs to charge");
        }
        if (this.isBroken) {
            throw new Error("Scooter needs repair");
        }
        this.user = user;
        this.station = null; // scooter is now checked out
        console.log(`Scooter ${this.serial} rented to ${user.username}`);
    }

    dock(station) {
        this.station = station;
        this.user = null; // clear the user since it's docked
        console.log(`Scooter ${this.serial} docked at ${station}`);
    }

    recharge() {
        const rechargeInterval = setInterval(() => {
            if (this.charge < 100) {
                this.charge += 10; // increment charge
                console.log(`Scooter ${this.serial} charging: ${this.charge}%`);
            } else {
                clearInterval(rechargeInterval);
            }
        }, 1000); // charge every second
    }

    requestRepair() {
        setTimeout(() => {
            this.isBroken = false;
            console.log(`Repair completed for Scooter ${this.serial}`);
        }, 5000); // repair after 5 seconds
    }
}

class User {
    constructor(username, password, age) {
        this.username = username;
        this.password = password;
        this.age = age;
        this.loggedIn = false; // user is not logged in initially
    }

    login(password) {
        if (this.password !== password) {
            throw new Error("Incorrect password");
        }
        this.loggedIn = true;
        console.log(`${this.username} logged in`);
    }

    logout() {
        this.loggedIn = false;
        console.log(`${this.username} logged out`);
    }
}

class ScooterApp {
    constructor() {
        this.stations = {
            "Station A": [],
            "Station B": [],
            "Station C": []
        };
        this.registeredUsers = {};
    }

    registerUser(username, password, age) {
        if (this.registeredUsers[username]) {
            throw new Error("User already registered");
        }
        if (age < 18) {
            throw new Error("Too young to register");
        }
        const user = new User(username, password, age);
        this.registeredUsers[username] = user;
        console.log(`${username} registered successfully`);
        return user;
    }

    loginUser(username, password) {
        const user = this.registeredUsers[username];
        if (!user || user.password !== password) {
            throw new Error("Username or password is incorrect");
        }
        user.login(password);
    }

    logoutUser(username) {
        const user = this.registeredUsers[username];
        if (!user || !user.loggedIn) {
            throw new Error("No such user is logged in");
        }
        user.logout();
    }

    createScooter(station) {
        if (!this.stations[station]) {
            throw new Error("No such station");
        }
        const scooter = new Scooter(station);
        this.stations[station].push(scooter);
        console.log(`Created new scooter with serial ${scooter.serial} at ${station}`);
        return scooter;
    }

    dockScooter(scooter, station) {
        if (!this.stations[station]) {
            throw new Error("No such station");
        }
        if (scooter.station === station) {
            throw new Error("Scooter already at station");
        }
        scooter.dock(station);
        this.stations[station].push(scooter);
    }

    rentScooter(scooter, user) {
        if (scooter.user) {
            throw new Error("Scooter already rented");
        }
        scooter.rent(user);
    }

    print() {
        console.log("Registered Users:");
        console.log(this.registeredUsers);
        console.log("Stations:");
        for (const [station, scooters] of Object.entries(this.stations)) {
            console.log(`${station}: ${scooters.length} scooters`);
        }
    }
}

// Example usage
const app = new ScooterApp();
app.registerUser('JohnDoe', 'password123', 25);
const scooter1 = app.createScooter('Station A');
const scooter2 = app.createScooter('Station B');

app.loginUser('JohnDoe', 'password123');
app.rentScooter(scooter1, app.registeredUsers['JohnDoe']);
scooter1.requestRepair();
scooter1.recharge();
app.print();
